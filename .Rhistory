}
return(tmat)
}
dist_calculation <- function(df_expr,patients){
tmat <- matrix(rep(0,length(patients)^2),nrow = length(patients),ncol = length(patients))
rownames(tmat) <- patients
colnames(tmat) <- patients
for (i in (1:(length(patients)-1))){
for (j in ((i+1):length(patients))){
edst <- dist(rbind(df_expr[,patients[i]],df_expr[,patients[j]]),method = "euclidian")[[1]]
tmat[i,j] <- edst
tmat[j,i] <- edst
}
}
return(tmat)
}
dist_gene <- dist_calculation(df_cmn_gene_expr,common_samples[-1])
dist_meth <- dist_calculation(df_cmn_meth,common_samples[-1])
knn_gene <- knn(dist_gene,15,common_samples[-1])
knn_methyl <- knn(dist_meth,15,common_samples[-1])
W1 <- similarity(dist_gene,knn_gene,common_samples[-1],0.5)
W2 <- similarity(dist_meth,knn_methyl,common_samples[-1],0.5)
D1 <- diagonal(W1,common_samples[-1])
D2 <- diagonal(W2,common_samples[-1])
P1 <- solve(D1) %*% W1
P2 <- solve(D2) %*% W2
S1 <- localAffinity(W1,knn_gene,common_samples[-1])
S2 <- localAffinity(W2,knn_methyl,common_samples[-1])
PC <- SNF(P1,P2,S1,S2,t=20)
#write.csv(W1,"W1.csv",row.names = TRUE,col.names = TRUE)
#write.csv(W2,"W2.csv",row.names = TRUE,col.names = TRUE)
processed_clinicaldata <- as.data.frame(data_Clinical)
PID <- processed_clinicaldata$PATIENT_ID
processed_clinicaldata <- as.matrix(processed_clinicaldata$OS_MONTHS)
rownames(processed_clinicaldata) <- PID
truth_labels <- c()
tname <- c()
for (i in 1:length(common_samples)){
rname <- rownames(processed_clinicaldata)
if(sum(common_samples[i] == rname)){
tname <- c(tname,common_samples[i])
OM <- processed_clinicaldata[common_samples[i],]
print(OM)
if(OM <= 10){
truth_labels <- c(truth_labels,1)
}
else if(OM <= 30){
truth_labels <- c(truth_labels,2)
}
else{
truth_labels <- c(truth_labels,3)
}
}
}
names(truth_labels) <- tname
#write.csv(PC,"WC.csv",row.names = TRUE,col.names = TRUE)
library(MCL)
library(igraph)
?graph.adjacency
gu <- graph.adjacency(D1,weighted = TRUE)
View(D1)
View(D1)
View(D1)
library("SNFtool")
library("elasticnet")
dist_calculation <- function(df_expr,patients){
tmat <- matrix(rep(0,length(patients)^2),nrow = length(patients),ncol = length(patients))
rownames(tmat) <- patients
colnames(tmat) <- patients
for (i in (1:(length(patients)-1))){
for (j in ((i+1):length(patients))){
edst <- dist(rbind(df_expr[,patients[i]],df_expr[,patients[j]]),method = "euclidian")[[1]]
tmat[i,j] <- edst
tmat[j,i] <- edst
}
}
return(tmat)
}
knn <- function(D,N,patients){
NNM <- matrix(rep(0,length(patients)*(N+2)),nrow = length(patients),ncol = N+2)
rownames(NNM) <- patients
colnames(NNM) <- c(1:(N+1),"val")
for (i in (1:length(patients))){
row <- sort(D[i,])
neighbours <- rownames(as.data.frame(row))
NNM[i,] <- c(neighbours[1:(N+1)],mean(row[1:(N+1)]))
}
return(NNM)
}
similarity <- function(D,NN,patients,mu){
tmat <- matrix(rep(1,length(patients)^2),nrow = length(patients),ncol = length(patients))
rownames(tmat) <- patients
colnames(tmat) <- patients
for (i in (1:(length(patients)-1))){
for (j in ((i+1):length(patients))){
denom <- (as.numeric(NN[patients[i],"val"]) + as.numeric(NN[patients[j],"val"]) + D[i,j]) / 3
Wt <- exp(-1 * ((D[i,j] ^ 2)/(mu * denom)))
tmat[i,j] <- Wt
tmat[j,i] <- Wt
}
}
return(tmat)
}
diagonal <- function(W,patients){
tmat <- matrix(rep(0,length(patients)^2),nrow = length(patients),ncol = length(patients))
rownames(tmat) <- patients
colnames(tmat) <- patients
for (i in 1:length(patients)){
tmat[i,i] <- sum(W[i,])
}
return(tmat)
}
localAffinity <- function(W,NN,patients){
tmat <- matrix(rep(1,length(patients)^2),nrow = length(patients),ncol = length(patients))
rownames(tmat) <- patients
colnames(tmat) <- patients
for (i in (1:(length(patients)))){
nhood <- NN[i,-c(dim(NN)[2])]
tmat[i,] <- 0
tmat[i,nhood] <- W[i,nhood] / sum(W[i,nhood])
}
return(tmat)
}
SNF <- function(P1,P2,S1,S2,t){
P01 <- P1
P02 <- P2
for (i in 0:t){
PT1 <- S1 %*% P02 %*% t(S1)
PT2 <- S2 %*% P01 %*% t(S2)
P01 <- PT1
P02 <- PT2
}
PC <- (P01 + P02) / 2
return(PC)
}
data_Clinical <- read.csv("data_clinical.csv")
data_g_expr <- read.csv("data_mRNA_processed.csv")
df_gene_expr <- as.data.frame(data_g_expr)
gene_samples <- colnames(df_gene_expr)[-1]
data_methyl <- read.csv("data_methyl_processed.csv")
df_methyl <- as.data.frame(data_methyl)
meth_samples <- colnames(df_methyl)[-c(1,2)]
df_methyl$Entrez_Gene_Id <- NULL
common_samples <- c()
for (i in (1:length(gene_samples))){
if(sum(meth_samples == gene_samples[i])){
common_samples <- c(common_samples,gene_samples[i])
}
}
common_samples <- c("Hugo_Symbol",common_samples)
df_cmn_gene_expr <- df_gene_expr[,common_samples]
df_cmn_meth <- df_methyl[,common_samples]
dist_gene <- dist_calculation(df_cmn_gene_expr,common_samples[-1])
dist_meth <- dist_calculation(df_cmn_meth,common_samples[-1])
knn_gene <- knn(dist_gene,15,common_samples[-1])
knn_methyl <- knn(dist_meth,15,common_samples[-1])
W1 <- similarity(dist_gene,knn_gene,common_samples[-1],0.5)
W2 <- similarity(dist_meth,knn_methyl,common_samples[-1],0.5)
D1 <- diagonal(W1,common_samples[-1])
D2 <- diagonal(W2,common_samples[-1])
P1 <- solve(D1) %*% W1
P2 <- solve(D2) %*% W2
S1 <- localAffinity(W1,knn_gene,common_samples[-1])
S2 <- localAffinity(W2,knn_methyl,common_samples[-1])
PC <- SNF(P1,P2,S1,S2,t=20)
#write.csv(W1,"W1.csv",row.names = TRUE,col.names = TRUE)
#write.csv(W2,"W2.csv",row.names = TRUE,col.names = TRUE)
processed_clinicaldata <- as.data.frame(data_Clinical)
PID <- processed_clinicaldata$PATIENT_ID
processed_clinicaldata <- as.matrix(processed_clinicaldata$OS_MONTHS)
rownames(processed_clinicaldata) <- PID
truth_labels <- c()
tname <- c()
for (i in 1:length(common_samples)){
rname <- rownames(processed_clinicaldata)
if(sum(common_samples[i] == rname)){
tname <- c(tname,common_samples[i])
OM <- processed_clinicaldata[common_samples[i],]
if(OM <= 10){
truth_labels <- c(truth_labels,1)
}
else if(OM <= 30){
truth_labels <- c(truth_labels,2)
}
else{
truth_labels <- c(truth_labels,3)
}
}
}
names(truth_labels) <- tname
#write.csv(PC,"WC.csv",row.names = TRUE,col.names = TRUE)
View(D1)
dist_calculation <- function(df_expr,patients){
tmat <- matrix(rep(0,length(patients)^2),nrow = length(patients),ncol = length(patients))
rownames(tmat) <- patients
colnames(tmat) <- patients
for (i in (1:(length(patients)-1))){
for (j in ((i+1):length(patients))){
edst <- dist(rbind(df_expr[,patients[i]],df_expr[,patients[j]]),method = "euclidian")[[1]]
print(edst)
tmat[i,j] <- edst
tmat[j,i] <- edst
}
}
return(tmat)
}
dist_gene <- dist_calculation(df_cmn_gene_expr,common_samples[-1])
View(dist_gene)
gu <- graph.adjacency(dist_gene,weighted = TRUE)
plot(gu)
mcl(dist_gene)
mcl(dist_gene,addLoops = FALSE)
mcl(dist_meth,addLoops = FALSE)
mcl(PC,addLoops = FALSE)
source("http://www.bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(Biobase)
library(GEOquery)
setwd("C:/Users/theNamelessOne/Desktop")
gds4824 <- getGEO(filename = "GDS4824.soft.gz")
Meta(gds4824)$sample_count
tbl_gds4824 <- Table(gds4824)[,]
write.csv(tbl_gds4824,row.names = TRUE,col.names = TRUE)
write.csv(tbl_gds4824,"prostate.csv",row.names = TRUE,col.names = TRUE)
Meta(gds4824)$sample_count
setwd("C:/Users/theNamelessOne/Desktop")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS4056.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"breast.csv",row.names = TRUE,col.names = TRUE)
setwd("C:/Users/theNamelessOne/Desktop")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS4794.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"sclc.csv",row.names = TRUE,col.names = TRUE)
setwd("C:/Users/theNamelessOne/Desktop")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS4500.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"aml_train.csv",row.names = TRUE,col.names = TRUE)
gds <- getGEO(filename = "GDS4501.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"aml_test.csv",row.names = TRUE,col.names = TRUE)
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS3057.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"aml.csv",row.names = TRUE,col.names = TRUE)
setwd("C:/Users/theNamelessOne/Desktop")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS3057.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"aml.csv",row.names = TRUE,col.names = TRUE)
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS5627.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"pancreatic.csv",row.names = TRUE,col.names = TRUE)
setwd("C:/Users/theNamelessOne/Desktop")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS5627.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"pancreatic.csv",row.names = TRUE,col.names = TRUE)
setwd("C:/Users/theNamelessOne/Desktop")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS4102.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
write.csv(tbl_gds,"pancreatic.csv",row.names = TRUE,col.names = TRUE)
library(glmnet)
?glmnet
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
print(fit1)
coef(fit1,s=0.01)
predict(fit1,newx=x[1:10,],s=c(0.01,0.005))
predict(fit1,newx=x[1:10,],s=c(0.01))
A <- matrix(c(1,1,1,1,1,-j,-1,j,1,-1,1,-1,1,j,-1,-j),4,4)
sqrt(-1)
?complex
as.complex(sqrt(-1))
A <- matrix(c(1,1,1,1,1,-i,-1,i,1,-1,1,-1,1,i,-1,-i),4,4)
A <- matrix(c(1,1,1,1,1,0-1i,-1,0+1i,1,-1,1,-1,1,0+1i,-1,0-1i),4,4)
A
A %*% t(c(1,2,4,4))
B <- c(1,2,4,4)
t(B)
t(t(B))
A %*% t(t(B))
Conj(A)
t(Conj(A))
DFT1 <- A %*% t(t(B))
t(Conj(A)) %*% DFT1
X <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16),4,4)
X
DFT2 <- A %*% X %*% t(A)
DFT2
DFT2 / 16
DFT2 / 4
DFT2 <- (A %*%) X %*% t(A)
DFT2 <- (A %*% X) %*% t(A)
DFT2
DFT2 <- (A %*% X) %*% t(Conj(A))
DFT2
DFT2 <- (A %*% X) %*% t(A)
DFT2
(Conj(A) %*% DFT2) %*% t(Conj(A))
(Conj(A) %*% DFT2) %*% t(Conj(A)) / 16
Conj(A) %*% (DFT2 %*% t(Conj(A))) / 16
(t(Conj(A)) %*% DFT2) %*% Conj(A) / 16
install.packages("skmeans")
iris
skmeans(iris[,-5],k=3,method = NULL)
library(skmeans)
skmeans(iris[,-5],k=3,method = NULL)
?skmeans
summary(iris)
str(iris)
x <- slam::read_stm_CLUTO(system.file("cluto", "re0.mat",
package = "skmeans"))
x[1,:]
x[1,]
str(x)
skmeans(as.matrix(iris[,-5]),k=3,method = NULL)
hval <- skmeans(as.matrix(iris[,-5]),k=3,method = NULL)
hval$value
hval$cluster
ir_mod <- as.matrix(iris[sample(nrow(iris)),])
ir_mod
hval <- skmeans(ir_mod[,-5],k=3,method = NULL)
ir_mod <- as.matrix(iris[sample(nrow(iris)),])
ir_mod <- iris[sample(nrow(iris)),]
ir_mod
hval <- skmeans(as.matrix(ir_mod[,-5]),k=3,method = NULL)
hval$cluster
install.packages("SNFtool")
library("SNFtool")
library(SNFtool)
library(caret)
data_clinical <- read.csv("data_clinical.csv",row.names = 1)
data_gene_expr <- read.csv("data_mRNA_processed.csv",row.names = 1)
patient_samples_gdata <- colnames(data_gene_expr)
data_methyl <- read.csv("data_methyl_processed.csv",row.names = 1)
data_methyl$Entrez_Gene_Id <- NULL
patient_samples_mdata <- colnames(data_methyl)
patients <- intersect(patient_samples_gdata,patient_samples_mdata)
patients_labels <- data.frame(OS = data_clinical[patients,"OS_MONTHS"])
rownames(patients_labels) <- patients
label <- rep(3,length(patients))
label[patients_labels$OS <= 30] <- 2
label[patients_labels$OS <= 10] <- 1
patients_labels <- cbind(patients_labels,label)
df_cmn_gene_expr <- t(data_gene_expr[,patients])
df_cmn_gene_expr[1:5,1:5]
cor(df_cmn_gene_expr[1:5,1:5])
dist_gene <- 1 - abs(cor(df_cmn_gene_expr))
dist_meth <- 1 - abs(cor(df_cmn_meth))
dim(dist_gene)
dim(df_cmn_gene_expr)
df_cmn_gene_expr[1:5,1:5]
dist_gene <- 1 - abs(cor(t(df_cmn_gene_expr)))
dim(dist_gene)
df_cmn_meth <- t(data_methyl[,patients])
dist_meth <- 1 - abs(cort(t(df_cmn_meth)))
dist_meth <- 1 - abs(cor(t(df_cmn_meth)))
dist_meth[1:5,1:5]
heatmap(dist_gene)
W1 <- affinityMatrix(dist_gene,15)
W2 <- affinityMatrix(dist_meth,15)
displayClusters(W1,patients_labels$label)
PC <- SNF(list(W1,W2),15,20)
C = 3 # number of clusters
group = spectralClustering(PC,C)
displayClusters(PC, group)
calNMI(group,patients_labels$label)
dist_gene <- as.matrix(dist(df_cmn_gene_expr))
dist_meth <- as.matrix(dist(df_cmn_meth))
W1 <- affinityMatrix(dist_gene,15)
W2 <- affinityMatrix(dist_meth,15)
displayClusters(W1,patients_labels$label)
displayClusters(W2,patients_labels$label)
PC <- SNF(list(W1,W2),15,20)
C = 3 # number of clusters
group = spectralClustering(PC,C)
displayClusters(PC, group)
calNMI(group,patients_labels$label)
group
heatmap(PC)
displayClusters(PC,patients_labels$label)
colnames(data_clinical)
str(data_clinical)
install.packages("survival")
install.packages("survival")
install.packages("survival")
install.packages("survival")
library(survival)
library(SNFtool)
library(igraph)
library(ggplot2)
library(cluster)
library(vegan)
data_clinical <- read.csv("data_clinical.csv",row.names = 1)
data_gene_expr <- read.csv("data_mRNA_processed.csv",row.names = 1)
patient_samples_gdata <- colnames(data_gene_expr)
data_methyl <- read.csv("data_methyl_processed.csv",row.names = 1)
data_methyl$Entrez_Gene_Id <- NULL
patient_samples_mdata <- colnames(data_methyl)
patients <- intersect(patient_samples_gdata,patient_samples_mdata)
df_cmn_gene_expr <- t(data_gene_expr[,patients])
df_cmn_meth <- t(data_methyl[,patients])
dist_gene <- as.matrix(dist(df_cmn_gene_expr))
dist_meth <- as.matrix(dist(df_cmn_meth))
W1 <- affinityMatrix(dist_gene,15)
W2 <- affinityMatrix(dist_meth,15)
PC <- SNF(list(W1,W2),15,20)
g <- graph.adjacency(PC,mode = "undirected", weighted = TRUE)
sgc <- spinglass.community(g)
g$layout <- layout.fruchterman.reingold
plot(g,minx=rep(-100,5),miny=rep(-100,5),maxx=rep(100,5),maxy=rep(100,5),niter=1500,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
g$layout <- layout.fruchterman.reingold(
minx=rep(-100,5),miny=rep(-100,5),maxx=rep(100,5),maxy=rep(100,5),niter=1500)
plot(g,vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,5),miny=rep(-100,5),maxx=rep(100,5),maxy=rep(100,5),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,5),miny=rep(-100,5),maxx=rep(100,5),maxy=rep(100,5),niter=1500)
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(rep(1,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(1,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
?par
par(mar=rep(2,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(5,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(1,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(0,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-1,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-5,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-10,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,
vertex.label = 1:length(patients),vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-10,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-100,58),miny=rep(-100,58),maxx=rep(100,58),maxy=rep(100,58),niter=1500)
plot(g,layout = glayout,vertex.color = sgc$membership, vertex.size = 8)
plot(g,layout = glayout,vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-10,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-200,58),miny=rep(-200,58),maxx=rep(200,58),maxy=rep(200,58),niter=1500)
plot(g,layout = glayout,vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-20,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-200,58),miny=rep(-200,58),maxx=rep(200,58),maxy=rep(200,58),niter=1500)
plot(g,layout = glayout,vertex.color = sgc$membership, vertex.size = 8)
par(mar=rep(-2,4))
par(mar=rep(0,4))
glayout <- layout.fruchterman.reingold(g,
minx=rep(-200,58),miny=rep(-200,58),maxx=rep(200,58),maxy=rep(200,58),niter=1500)
plot(g,layout = glayout,vertex.color = sgc$membership, vertex.size = 8)
